#include <iostream>

int main()
{
	// --------------------------------------------
	//  1. 시간 복잡도 (이론)
	// --------------------------------------------

	// 시간복잡도는 반복문이랑 크게 연관이 있습니다.
	
	// # 시간 복잡도란?
	//  - (N에 따라서) 코드가 실행되는데 얼마나 걸릴지 대략적으로 판별하는 표현
	//  - (N에 따라서) 이 프로그램이 얼마나 빠르게 / 느리게 동작하는지 수치로 표현

	// # 어떻게 표기하는가 (빅-오 표기법) Big-O
	//  - O(N)  이게 기본형태
	// O(1), O(N), O(N^2), O(LogN), O(N^3)
	// 
	// N이란, 데이터 양
	// 데이터가 1000개있냐, 10000개있냐, 100000개 있냐??

	// O(1) - 데이터양이 아무리많아도 얘는 1번밖에 실행안해요.
	// O(N) - 데이터양 그대로 실행한다 (N번 실행한다)
	// O(N^2) - N^2번 실행한다. (데이터가 1만개면 => 1억번 실행)
	// O(N^3) - N^3번 실행합니다. (데이터가 1000개면 => 10억번 실행)

	// O(N) - 데이터양 그대로 실행한다 (N번 실행한다)
	{
		int sum = 0;
		int N = 100;
		for (int i = 0; i < N; i++)
		{
			sum++;
		}
	}

	// O(N^2) - N^2번 실행한다. (데이터가 1만개면 => 1억번 실행)
	{
		int sum = 0;
		int N = 100;
		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < N; j++)
			{
				sum++;
			}
		}
	}

	// O(N^3) - N^3번 실행합니다. (데이터가 1000개면 => 10억번 실행)
	{
		int sum = 0;
		int N = 100;
		for (int i = 0; i < N; i++)
		{
			for (int j = 0; j < N; j++)
			{
				for (int k = 0; k < N; k++)
				{
					sum++;
				}
			}
		}

		// i => integer 관용적인 문구로 i를 주로써요.
		// 알파벳순으로 증가..
	}

	printf("finish!\n");
}